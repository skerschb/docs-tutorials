title: Define Your Data Set
ref: define_ds
level: 4
stepnum: 1
content: |
  
  When setting up a data store, your first task is to answer the
  question: "What data would I like to store and how do the fields
  relate to each other?".         

  This guide uses a hypothetical inventory database which can be used
  for the rest of the *Getting Started: CRUD* guides. The inventory
  database tracks items and their quantities, sizes, tags, and ratings.
  
  Here is an example of the types of fields you might wish to capture:
  
  .. list-table::
     :header-rows: 1
     :widths: auto

     * - name
       - quantity
       - size
       - status
       - tags
       - ratings

     * - journal
       - 25
       - 14x21,cm
       - A
       - brown, lined
       - A, 9
       
     * - notebook
       - 50
       - 8.5x11,in
       - A
       - college-ruled,perforated
       - B, 8
       
     * - paper
       - 100
       - 8.5x11,in
       - D
       - watercolor
       - C, 10

     * - planner
       - 75
       - 22.85x30,cm
       - D
       - 2019
       - D, 10
       
     * - postcard
       - 45
       - 10x,cm
       - D
       - double-sided,white   
       - F, 2

  .. note:: CRUD is a common acronym for the common database operations: ``Create``, ``Read``, ``Update``, and ``Delete``.
---
       
title: Identify Candidates for Embedded Data
ref: id_message
level: 4
stepnum: 2
content: |
  
  While a table might seem like a good place to store data, as you can
  see from the example above, there are fields in this data set that
  require multiple values and would not be easy to search or display if
  modeled in a single column (for example -- ``size``, ``tags``, and ``ratings``).
  
  In a SQL database you might solve this problem by creating a
  ``relational table``.
  
  In MongoDB, data is stored as documents. Within these documents
  you can embed fields. This gives you the ability to store multiple
  fields within a field.
  
  Once you have identified what fields you would like to store, decide
  which fields require multiple values. These fields will be candidates
  for embedded documents or lists of embedded documents within the
  document.
  
  For example, in the data above, ``size`` might consist of three
  fields:
  
  .. code-block:: javascript
  
     h: 14, w: 21, uom: "cm"
     
  And ``ratings`` might be split into:

  .. code-block:: javascript
  
     letter: A, score: 9
  
  And you might need to handle multiple ratings per item. So you might
  store them in a list:
  
  .. code-block:: javascript
  
     letter: A, score: 9,
     letter: B, score: 7,
     letter: D, score: 5
  
---      
title: Put Your Data in JSON format
ref: json_implement
level: 4
stepnum: 3
content: |
  
  The documents stored in MongoDB are in ``JSON`` format (though they
  are actually stored as a binary form of JSON). JSON (JavaScript Object
  Notation) is formatted as name/value pairs. In JSON documents,
  fieldnames and values are separated by a colon, and sets of fields are
  encapsulated in "curly braces" ({}) and then separated by commas.

  In MongoDB, you can choose to provide your MongoDB instance with a
  pre-defined data structure (called a *schema*) when you set up your
  database, or you can leave your data structure undefined so it can
  change as your application or data changes.
  
  A JSON document that stores an inventory item might look like this:

  .. note:: 
  
  .. class:: copyable-code
  .. code-block:: javascript
  
    
     {
      "name": "Bricksoil",
      "qty": 134,
      "rating": [
        {
          "letter": "A",
          "score": 7
        },
        {
          "letter": "B",
          "score": 6
        },
        {
          "letter": "C",
        "  score": 5
        },
        {
          "letter": "D",
          "score": 4
        },
        {
          "letter": "A",
          "score": 3
        },
        {
          "letter": "B",
          "score": 2
        },
        {
          "letter": "C",
          "score": 1
        }
      ],
      "size": {
        "height": 480,
        "length": 240,
        "unit": "in",
        "width": 428
      },
      "status": "C",
      "tags": [
        "messy",
        "productive"
      ]
    }

  This looks very different from the tabular data  structure you started
  with in Step 1.

  .. note:: You may have noticed the field names and string values in the dataset above are double
     quoted ("). MongoDB can process field names that are not quoted, but when using
     the mongo shell, certain special characters that are allowed by mongo but not by the shell
     might cause errors. Quoting the field names allows you to bypass these errors. Number values are not quoted.

  
  
     
  
  
  
