title: Define Your Data Set
ref: define_dp
level: 4
stepnum: 1
content: |
  
  When setting up a data store, your first task is to answer the
  question "What data would I like to store and how do the fields relate
  to each other?".

  Since only you know the answer to this question, this guide uses a
  hypothetical database. This database model can be used for the rest of
  the CRUD (Create, Read, Update, Delete) guides.

  For this example you will design an
  inventory database which tracks items and their quantities, sizes,
  tags, and ratings.
  
  Here is an example of the types of fields you might wish to capture in
  your inventory database.
  
  .. list-table::
     :header-rows: 1
     :widths: auto

     * - name
       - quantity
       - size
       - status
       - tags
       - ratings

     * - journal
       - 25
       - 14x21,cm
       - A
       - brown, lined
       - A, 9
       
     * - notebook
       - 50
       - 8.5x11,in
       - A
       - college-ruled,perforated
       - B, 8
       
     * - paper
       - 100
       - 8.5x11,in
       - D
       - watercolor
       - C, 10

     * - planner
       - 75
       - 22.85x30,cm
       - D
       - 2019
       - D, 10
       
     * - postcard
       - 45
       - 10x,cm
       - D
       - double-sided,white   
       - F, 2

---
       
title: Identify Candidates for Embedded Data
ref: JSON_message
level: 4
stepnum: 1
content: |
  
  While a table might seem like a good place to store data, as you can
  see from the example above, there are fields in this data set that
  require multiple values and would not work well modeled in a single
  column (size, tags, ratings).
  
  In a SQL database you might solve this problem by creating a
  ``relational table``.
  
  In MongoDB, data is stored within documents. Within these documents
  you can embed fields. This gives you the ability to store multiple
  fields within a field.
  
  In your example, decide which fields require multiple values. These
  fields will be candidates for embedded documents or lists of embedded
  documents within your document.
  
  For example, in the data above, ``size`` might consist of three
  fields:
  
  .. code-block:: javascript
  
     h: 14, w: 21, uom: "cm"
     
  And ``ratings`` might be split into:

  .. code-block:: javascript
  
     letter: A, score: 9
  
  And you might need to handle multiple ratings per item. So you might
  store them in a list:
  
  .. code-block:: javascript
  
     letter: A, score: 9,
     letter: B, score: 7,
     letter: D, score: 5
  
---      
title: Put Your Data in JSON format
ref: json_implement
level: 4
stepnum: 3
content: |
  
  MongoDB stores documents in ``JSON`` format. JSON (JavaScript Object
  Notation) is formatted with key/value pairs. In JSON documents,
  fieldnames and values are separated by a colon, and fields are
  separated by commas.

  In MongoDB, you can choose to provide a schema with a pre-defined data
  structure, or you can leave your schema undefined so that your
  database structure can change as your application changes.
  
  A JSON document that stores an inventory item might look like
  this.

  .. note:: 
  
  .. class:: copyable-code
  .. code-block:: javascript
  
    
     {
      "name": "Bricksoil",
      "qty": 134,
      "rating": [
        {
          "letter": "A",
          "score": 7
        },
        {
          "letter": "B",
          "score": 6
        },
        {
          "letter": "C",
        "  score": 5
        },
        {
          "letter": "D",
          "score": 4
        },
        {
          "letter": "A",
          "score": 3
        },
        {
          "letter": "B",
          "score": 2
        },
        {
          "letter": "C",
          "score": 1
        }
      ],
      "size": {
        "height": 480,
        "length": 240,
        "unit": "in",
        "width": 428
      },
      "status": "C",
      "tags": [
        "messy",
        "productive"
      ]
    }

  This looks very different from the tabular data  structure you started
  with in Step 1.
  

  .. note:: You may have noticed the field names and string values in the dataset above are double
     quoted ("). MongoDB can process field names that are not quoted as well, but when using
     the mongo shell, certain special characters that are allowed by mongo but not by the shell
     might cause errors. Quoting the field names allows you to bypass these errors. Number values are not quoted.

  
  
     
  
  
  
